// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCES:
 *     DefaultEventCreated.avsc
 *     EventHeader.avsc
 */
package test_vents_testevents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

// This is a default event to edit. Best practice is to name your events in the past tense.
type DefaultEventCreated struct {
	// Example: This is a sample attribute, please edit.
	Sample string `json:"sample"`
}

const DefaultEventCreatedAvroCRC64Fingerprint = "\x1ew\xf1=\x8f\x8c-1"

func NewDefaultEventCreated() DefaultEventCreated {
	r := DefaultEventCreated{}
	return r
}

func DeserializeDefaultEventCreated(r io.Reader) (DefaultEventCreated, error) {
	t := NewDefaultEventCreated()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDefaultEventCreatedFromSchema(r io.Reader, schema string) (DefaultEventCreated, error) {
	t := NewDefaultEventCreated()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDefaultEventCreated(r DefaultEventCreated, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Sample, w)
	if err != nil {
		return err
	}
	return err
}

func (r DefaultEventCreated) Serialize(w io.Writer) error {
	return writeDefaultEventCreated(r, w)
}

func (r DefaultEventCreated) Schema() string {
	return "{\"doc\":\"This is a default event to edit. Best practice is to name your events in the past tense.\",\"fields\":[{\"doc\":\"Example: This is a sample attribute, please edit.\",\"name\":\"sample\",\"type\":\"string\"}],\"name\":\"com.kroger.desp.events.rph.test.DefaultEventCreated\",\"type\":\"record\"}"
}

func (r DefaultEventCreated) SchemaName() string {
	return "com.kroger.desp.events.rph.test.DefaultEventCreated"
}

func (_ DefaultEventCreated) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DefaultEventCreated) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DefaultEventCreated) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DefaultEventCreated) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DefaultEventCreated) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DefaultEventCreated) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DefaultEventCreated) SetString(v string)   { panic("Unsupported operation") }
func (_ DefaultEventCreated) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DefaultEventCreated) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Sample}
	}
	panic("Unknown field index")
}

func (r *DefaultEventCreated) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DefaultEventCreated) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ DefaultEventCreated) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DefaultEventCreated) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DefaultEventCreated) Finalize()                        {}

func (_ DefaultEventCreated) AvroCRC64Fingerprint() []byte {
	return []byte(DefaultEventCreatedAvroCRC64Fingerprint)
}

func (r DefaultEventCreated) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["sample"], err = json.Marshal(r.Sample)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DefaultEventCreated) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["sample"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sample); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sample")
	}
	return nil
}
